import React, { useState, useEffect } from 'react';
//import { getDatabase, ref, set } from 'firebase/database';
import { getDatabase, ref, push, set } from 'firebase/database';

import backgroundImage from './bgimg.jpg';
import backgroundVideo from './Bgv.mp4';
import './styles.css';

const Crud = () => {
  const [name, setName] = useState('');
  const [inTime, setInTime] = useState('');
  const [outTime, setOutTime] = useState('');
  const [date, setDate] = useState('');
  const [inLocation, setInLocation] = useState(null);
  const [outLocation, setOutLocation] = useState(null);
  const [db, setDb] = useState(null);
  const [isDbInitialized, setIsDbInitialized] = useState(false);
  const [showInTime, setShowInTime] = useState(false);
  const [showOutTime, setShowOutTime] = useState(false);
  const [inTimePlace, setInTimePlace] = useState('');
  const [outTimePlace, setOutTimePlace] = useState('');

  useEffect(() => {
    const currentTime = new Date().toLocaleTimeString();
    setInTime(currentTime);
    setDate(new Date().toLocaleDateString());

    // Automatically get location for In Time
    getLocation('in');
  }, []);

  useEffect(() => {
    const database = getDatabase();
    setDb(database);
    setIsDbInitialized(true);
  }, []);

  const handleSetTime = (timeType) => {
    if (timeType === 'in') {
      setShowInTime(true);
      setShowOutTime(false);
    } else {
      setShowOutTime(true);
      setShowInTime(false);
    }

    if (window.confirm(`Do you want to set ${timeType === 'in' ? 'In' : 'Out'} Time?`)) {
      const currentTime = new Date().toLocaleTimeString();
      if (timeType === 'in') {
        setInTime(currentTime);
        getLocation('in');
      } else {
        setOutTime(currentTime);
        getLocation('out');
      }
    }
  };

  const getLocation = (timeType) => {
    if (navigator.geolocation) {
      navigator.geolocation.getCurrentPosition(
        position => {
          console.log("Location received:", position.coords);
          const { latitude, longitude } = position.coords;
          if (timeType === 'in') {
            setInLocation({ latitude, longitude });
          } else {
            setOutLocation({ latitude, longitude });
          }
        },
        error => {
          console.error('Error getting location:', error);
          if (error.code === error.PERMISSION_DENIED) {
            alert('Please enable GPS to use this feature.');
          }
        }
      );
    } else {
      console.error('Geolocation is not supported by this browser.');
    }
  };

  const handleChangeName = (e) => {
    setName(e.target.value);
  };

  const insertData = async () => {
    if (isDbInitialized && db && name.trim() !== '') {
      try {
        const userData = {
          name,
          date,
          inLocation: inLocation ? { latitude: inLocation.latitude, longitude: inLocation.longitude } : null,
          outLocation: outLocation ? { latitude: outLocation.latitude, longitude: outLocation.longitude } : null
        };
  
        if (showInTime && inTime && inTimePlace) {
          userData.inTime = inTime;
          userData.inTimePlace = inTimePlace;
        }
  
        if (!showInTime && outTime && outTimePlace) {
          userData.outTime = outTime;
          userData.outTimePlace = outTimePlace;
        }
  
        // Generate unique ID using push()
        const newDataRef = push(ref(db, 'users/' + name));
        const newId = newDataRef.key; // Get the unique ID generated by Firebase
  
        // Set data under the generated unique ID
        await set(ref(db, `users/${name}/${newId}`), userData);
  
        console.log('Data added successfully!');
        setName('');
        setOutTime('');
        setOutTimePlace('');
        setInLocation(null);
        setOutLocation(null);
      } catch (error) {
        console.error('Error adding data: ', error);
      }
    } else {
      console.error('Database is not initialized or name is empty.');
    }
  };
  
  

  return (
    <div className="container">
      <video autoPlay muted loop className="videoBackground">
        <source src={backgroundVideo} type="video/mp4" />
        <img src={backgroundImage} alt="Background" className="imageFallback" />
      </video>
      <div className="content">
        <h2 className="heading">Crud Operations</h2>
        <div className="form">
          <input
            type="text"
            placeholder="Enter name"
            value={name}
            onChange={handleChangeName}
            className="input"
          />
          <input
            type="text"
            placeholder="Date"
            value={date}
            readOnly
            className="input"
          />

          {showInTime && (
            <div>
              <input
                type="text"
                placeholder="In Time"
                value={inTime}
                readOnly
                className="input"
              />
              <input
                type="text"
                placeholder="In Time Place"
                value={inTimePlace}
                onChange={(e) => setInTimePlace(e.target.value)}
                className="input"
              />
              {inLocation && (
                <div className="mapContainer">
                  <p className="mapText">In Location:</p>
                  <p>{JSON.stringify(inLocation)}</p>
                </div>
              )}
            </div>
          )}

          {showOutTime && (
            <div>
              <input
                type="text"
                placeholder="Out Time"
                value={outTime}
                readOnly
                className="input"
              />
              <input
                type="text"
                placeholder="Out Time Place"
                value={outTimePlace}
                onChange={(e) => setOutTimePlace(e.target.value)}
                className="input"
              />
              {outLocation && (
                <div className="mapContainer">
                  <p className="mapText">Out Location:</p>
                  <p>{JSON.stringify(outLocation)}</p>
                </div>
              )}
            </div>
          )}

          <button onClick={() => handleSetTime('in')} className="button">Set In Time</button>
          <button onClick={() => handleSetTime('out')} className="button">Set Out Time</button>
          <button onClick={insertData} className="button">Add Data</button>
        </div>
      </div>
    </div>
  );
};

export default Crud;
